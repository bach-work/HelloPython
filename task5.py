# 5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. При нажатии
# Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел,
# разделённых пробелом и снова нажать Enter. Сумма вновь введённых чисел будет
# добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введён после нескольких чисел, то вначале нужно добавить сумму
# этих чисел к полученной ранее сумме и после этого завершить программу.
import re

g_sum = 0  # Сумма


# На случай отрицательных чисел
def is_number(s):
    """Проверяет что строка - число"""
    try:
        int(s)
        return True
    except ValueError:
        return False


def calc_sum(digit_list):
    """

    :param digit_list: список числовых значений
    :return: признак того, что был спецсимвол

    Можно было рассчитывать локальную сумму каждого списка и возвращать ее вместе с признаком,
    но я решил сделать через область видимости global
    """
    # Внутренняя функция
    def has_spec(item):
        """Возвращает наличие спецсимвола в item через регулярку"""
        return bool(re.findall(r'\W', item))

    global g_sum  # Сказали что сумма глобальная
    for value in digit_list:
        if is_number(value):  # Если элемент число
            g_sum += int(value)  # добавляем в глобальную сумму
        elif has_spec(value):  # Иначе проверяем на спецсимвол
            return True  # Возвращаем признак того, что хватит
        else:  # Не число и не спецсимвол
            continue  # Ищем дальше
    return False


fl = False  # Признак наличия спецсимвола
while not fl:
    in_list = input("Введите строку чисел, разделенных пробелом(';' for exit):").split()
    fl = calc_sum(in_list)
    print('Общая сумма:{} '.format(g_sum))
print('--- END ---')
